package tasks

import com.github.dockerjava.api.DockerClient
import com.github.dockerjava.api.async.ResultCallback
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.*
import org.gradle.kotlin.dsl.*
import utils.dockerPluginProject

// Pulls down a docker image if not already present.
// https://docs.docker.com/engine/reference/commandline/pull/
open class DockerPull : DefaultTask() {

    // The name of the image.
    @Input
    val name = project.objects.property<String>()

    // The tag of the image.
    @Input
    val tag = project.objects.property<String>().convention("latest")

    // The digest of the image.
    @Input
    @Optional
    val digest = project.objects.property<String>()

    // Image digest generated by remote repository, uniquely identifies the image.
    @OutputFile
    val digestFile = project.objects.fileProperty().convention(name.flatMap { project.layout.buildDirectory.file("$it-digest.json") })

    @get:Internal
    val image: String by lazy {
        if (digest.isPresent) {
            "${name.get()}:${tag.get()}@${digest.get()}"
        } else {
            "${name.get()}:${tag.get()}"
        }
    }

    init {
        // Check that another process has not removed the image since it was last built.
        outputs.upToDateWhen { task -> (task as DockerPull).imageExist() }
    }

    private fun imageExist(): Boolean {
        val dockerClient: DockerClient by project.dockerPluginProject().extra
        return try {
            dockerClient.inspectImageCmd(image).exec().run {
                digestFile.get().asFile.readText() == repoDigests.first()
            }
        } catch (e: Exception) {
            false
        }
    }

    private fun pull() {
        val dockerClient: DockerClient by project.dockerPluginProject().extra
        dockerClient.pullImageCmd(image).exec(ResultCallback.Adapter())?.awaitCompletion()
    }

    private fun updateDigest() {
        val dockerClient: DockerClient by project.dockerPluginProject().extra
        dockerClient.inspectImageCmd(image).exec().run {
            digestFile.get().asFile.writeText(repoDigests.first())
        }
    }

    @TaskAction
    fun exec() {
        pull()
        updateDigest()
    }
}
